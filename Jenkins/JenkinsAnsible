def buildno = BUILD_NUMBER
pipeline {
    agent any
    
    tools {
        maven "maven3.6.3"
    }
	
    stages {
      	
       stage('Build'){
             steps{
		    sh "mvn clean package"
	              }
          } 
	  
	
	   
	/*stage('Dependency Check'){
             steps{
			     dependencyCheck additionalArguments: '', odcInstallation: 'dependency check'
		         dependencyCheckPublisher pattern: ''
	              }
        } 
	
	stage('Building image') {
            steps{
                script {
			  sh "docker build -t yoshithadocker/mydockerrepo:${buildno} ." 
                     }
                  }
              }
	      
	stage('scan'){
             steps{
		    //sh "grype yoshithadocker/mydockerrepo:${buildno}"
			grypeScan autoInstall: false, repName: 'grypeReport_${JOB_NAME}_${BUILD_NUMBER}.txt', scanDest: 'dir:/var/lib/jenkins/workspace/deploy'
              }
        } 
	
	stage('push to repo') {
            steps{
                script {
			  withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'dockerpassword', usernameVariable: 'dockeruser')]) {                        
					sh 'docker login -u yoshithadocker -p ${dockerpassword}'
			                sh "docker push yoshithadocker/mydockerrepo:${buildno}"
                     }
                  }
              }
          }
	 
	 stage('upload to nexus') {
            steps {
                nexusArtifactUploader artifacts: [
				[
				artifactId: 'demo',
				classifier: '',
				file: 'target/demo-2.0.0-SNAPSHOT.war',
				type: 'war'
				]
				],
				credentialsId: 'nexus credentials',
				groupId: 'com.domain',
				nexusUrl: '18.183.190.3:8081',
				nexusVersion: 'nexus3',
				protocol: 'http',
				repository: 'demo',
				version: '2.0.0-SNAPSHOT'
            }
        }*/
	
	  stage('Deploy'){
             steps{
	          // sh 'ansible aws_ec2 -i aws_ec2.yaml -m ping --ssh-common-args="-o StrictHostKeyChecking=no" -u ubuntu --private-key=keypair.pem'
		   sh 'ansible aws_ec2 -i aws_ec2.yaml -m ping --ssh-common-args="-o StrictHostKeyChecking=no" -u ubuntu --private-key=/var/lib/jenkins/keypair.pem'
		   sh 'ansible-playbook Deploy.yml -i aws_ec2.yaml --ssh-common-args="-o StrictHostKeyChecking=no" -u ubuntu --private-key=/home/ubuntu/keypair.pem'
		   //ansiblePlaybook credentialsId: 'tomcatubuntu', disableHostKeyChecking: true, installation: 'ansible', inventory: 'hosts.inv', playbook: 'Deploy.yml'
          }
       }
	
	
	  stage('Deploy'){
            steps{
		   //ansiblePlaybook credentialsId: 'tomcatubuntu', disableHostKeyChecking: true, installation: 'ansible', inventory: 'aws_ec2.yaml', playbook: 'Deploy.yml', vaultCredentialsId: 'vault credentials'
		   ansiblePlaybook credentialsId: 'tomcatubuntu', disableHostKeyChecking: true, installation: 'ansible', inventory: 'aws_ec2.yaml', playbook: 'Deploy.yml', vaultCredentialsId: 'vault credentials'
              }
        }
	  
     }

}
